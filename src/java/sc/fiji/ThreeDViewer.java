package sc.fiji;

import cleargl.*;
import net.imagej.ops.geom.geom3d.mesh.TriangularFacet;
import net.imagej.ops.geom.geom3d.mesh.Vertex;
import sc.fiji.display.process.MeshConverter;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

import com.jogamp.opengl.GLAutoDrawable;
import scenery.*;
import scenery.rendermodules.opengl.DeferredLightingRenderer;

public class ThreeDViewer extends SceneryDefaultApplication {
	
	static ThreeDViewer viewer;
	
	public ThreeDViewer() {
		super("ThreeDViewer", 800, 600);
	}
	
    public ThreeDViewer(String applicationName, int windowWidth, int windowHeight) {
        super(applicationName, windowWidth, windowHeight);
    }

    public void init(GLAutoDrawable pDrawable) {

        setDeferredRenderer( new DeferredLightingRenderer( pDrawable.getGL().getGL4(), getGlWindow().getWidth(), getGlWindow().getHeight() ) );
        getHub().add(SceneryElement.RENDERER, getDeferredRenderer());

        PointLight[] lights = new PointLight[2];

        for( int i = 0; i < lights.length; i++ ) {
            lights[i] = new PointLight();
            lights[i].setPosition( new GLVector(2.0f * i, 2.0f * i, 2.0f * i) );
            lights[i].setEmissionColor( new GLVector(1.0f, 0.0f, 1.0f) );
            lights[i].setIntensity( 0.2f*(i+1) );
            getScene().addChild( lights[i] );
        }

        Camera cam = new DetachedHeadCamera();
        cam.setPosition( new GLVector(0.0f, 0.0f, -5.0f) );
        cam.setView( new GLMatrix().setCamera(cam.getPosition(), cam.getPosition().plus(cam.getForward()), cam.getUp()) );
        cam.setProjection( new GLMatrix().setPerspectiveProjectionMatrix( (float) (70.0f / 180.0f * java.lang.Math.PI), 1024f / 1024f, 0.1f, 1000.0f) );
        cam.setActive( true );
        getScene().addChild(cam);
        
//        Box hullbox = new Box(new GLVector(50.0f, 50.0f, 50.0f));
//        Material hullboxMaterial = new Material();
//        hullboxMaterial.setDoubleSided(true);
//        hullbox.setMaterial(hullboxMaterial);
        
//        getScene().addChild(hullbox);

        getDeferredRenderer().initializeScene(getScene());

        //getRepl().addAccessibleObject(getScene());
        //getRepl().addAccessibleObject(getDeferredRenderer());
        //getRepl().showConsoleWindow();

        viewer = this;
    }

    public static void addBox() {
    	Material boxmaterial = new Material();
        boxmaterial.setAmbient( new GLVector(1.0f, 0.0f, 0.0f) );
        boxmaterial.setDiffuse( new GLVector(0.0f, 1.0f, 0.0f) );
        boxmaterial.setSpecular( new GLVector(1.0f, 1.0f, 1.0f) );
        //boxmaterial.getTextures().put("diffuse", SceneViewer3D.class.getResource("textures/helix.png").getFile() );

        final Box box = new Box(new GLVector(1.0f, 1.0f, 1.0f) );
        box.setMaterial( boxmaterial );
        box.setPosition( new GLVector(0.0f, 0.0f, 0.0f) );

        Thread rotator = new Thread(){
            public void run() {
                while (true) {
                    box.getRotation().rotateByAngleY(0.01f);
                    box.setNeedsUpdate(true);

                    try {
                        Thread.sleep(20);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        
        rotator.start();
        
        viewer.getScene().addChild(box);
    }
    
    public static void writeSCMesh( String filename, Mesh scMesh ) {
    	File f = new File( filename );
        BufferedOutputStream out;
		try {
			out = new BufferedOutputStream( new FileOutputStream( f ) );
			out.write( "solid STL generated by FIJI\n".getBytes() );
			float[] verts = scMesh.getVertices();
			float[] norms = scMesh.getNormals();
			for( int k = 0; k < verts.length/9; k++ ) {
				int offset = k * 9;
				out.write( ("facet normal " + norms[offset] + " " + norms[offset+1] + " " + norms[offset+2] + "\n").getBytes() );
				out.write( "outer loop\n".getBytes() );
				for( int v = 0; v < 3; v++ ) {
					int voff = v*3;
					out.write( ( "vertex\t" + verts[offset+voff] + " " + verts[offset+voff+1] + " " + verts[offset+voff+2] + "\n" ).getBytes() );
				}
				out.write( "endloop\n".getBytes() );
				out.write( "endfacet\n".getBytes() );
	        }
			out.write( "endsolid vcg\n".getBytes() );
	        out.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
    }
    
    public static void addSTL( String filename ) {    	
    	Mesh scMesh = new Mesh();
    	scMesh.readFromSTL( filename );
    	
    	Material material = new Material();
        material.setAmbient( new GLVector(1.0f, 0.0f, 0.0f) );
        material.setDiffuse( new GLVector(0.0f, 1.0f, 0.0f) );
        material.setSpecular( new GLVector(1.0f, 1.0f, 1.0f) );
    	
        scMesh.setMaterial( material );
        scMesh.setPosition( new GLVector(0.0f, 0.0f, 0.0f) );
        
    	viewer.getScene().addChild( scMesh );
    }
    
    public static void addMesh( net.imagej.ops.geom.geom3d.mesh.Mesh mesh ) {
    	MeshConverter converter = new MeshConverter( mesh );
    	
    	Mesh scMesh = converter.getSceneryMesh();
    	
    	Material material = new Material();
        material.setAmbient( new GLVector(1.0f, 0.0f, 0.0f) );
        material.setDiffuse( new GLVector(0.0f, 1.0f, 0.0f) );
        material.setSpecular( new GLVector(1.0f, 1.0f, 1.0f) );
        material.setDoubleSided(true);
    	
        scMesh.setMaterial( material );
        scMesh.setPosition( new GLVector(1.0f, 1.0f, 1.0f) );        
        	            	
    	viewer.getScene().addChild( scMesh );
    }
    
	public static void main(String... args)
	{		
		ThreeDViewer viewer = new ThreeDViewer( "ThreeDViewer", 800, 600 );
        viewer.main();
	}
}
